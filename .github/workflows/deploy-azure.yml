name: Deploy to Azure

on:
  push:
    branches: [main]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'infrastructure/azure/**'
      - '.github/workflows/deploy-azure.yml'
  pull_request:
    branches: [main]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'infrastructure/azure/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - prod

env:
  AZURE_RESOURCE_GROUP: savelife-prod-rg
  AZURE_LOCATION: eastus
  AZURE_CONTAINER_REGISTRY: savelifeprod
  AZURE_WEBAPP_FRONTEND: savelife-prod-frontend
  AZURE_WEBAPP_BACKEND: savelife-prod-backend

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: |
          npm install -g pnpm
          pnpm install --frozen-lockfile

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          pip install -r requirements.txt

      - name: Run frontend tests
        working-directory: ./frontend
        run: |
          pnpm run test:ci
          pnpm run lint
          pnpm run type-check

      - name: Run backend tests
        working-directory: ./backend
        run: |
          python -m pytest tests/ --cov=src --cov-report=xml --cov-report=html
          python -m flake8 src/
          python -m mypy src/

      - name: Upload test results to Azure DevOps
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            frontend/coverage/
            backend/htmlcov/
            backend/coverage.xml

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Microsoft Security DevOps
        uses: microsoft/security-devops-action@v1.6.0
        id: msdo
        with:
          categories: 'secrets,code'

      - name: Upload MSDO results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.msdo.outputs.sarifFile }}

  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    outputs:
      frontend-image: ${{ steps.build-frontend.outputs.image }}
      backend-image: ${{ steps.build-backend.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push frontend image
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/frontend:latest
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Build and push backend image
        id: build-backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/backend:latest
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Scan images with Azure Security Center
        run: |
          # Install Azure CLI extensions
          az extension add --name containerapp
          
          # Scan images for vulnerabilities
          az acr repository show-tags \
            --name ${{ env.AZURE_CONTAINER_REGISTRY }} \
            --repository frontend \
            --output table
          
          az acr repository show-tags \
            --name ${{ env.AZURE_CONTAINER_REGISTRY }} \
            --repository backend \
            --output table

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: staging-azure
      url: https://savelife-staging-frontend.azurewebsites.net
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App (Backend Staging)
        uses: azure/webapps-deploy@v2
        with:
          app-name: savelife-staging-backend
          images: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/backend:${{ github.sha }}

      - name: Deploy to Azure Web App (Frontend Staging)
        uses: azure/webapps-deploy@v2
        with:
          app-name: savelife-staging-frontend
          images: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/frontend:${{ github.sha }}

      - name: Wait for deployment
        run: |
          sleep 60

      - name: Run smoke tests
        run: |
          # Test frontend
          curl -f https://savelife-staging-frontend.azurewebsites.net/ || exit 1
          
          # Test backend health
          curl -f https://savelife-staging-backend.azurewebsites.net/api/ai/health || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production-azure
      url: https://savelife.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App (Backend Production)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_BACKEND }}
          images: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/backend:${{ github.sha }}

      - name: Deploy to Azure Web App (Frontend Production)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_FRONTEND }}
          images: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/frontend:${{ github.sha }}

      - name: Wait for deployment
        run: |
          sleep 60

      - name: Run production health checks
        run: |
          # Test via Application Gateway
          curl -f https://savelife.com/ || exit 1
          curl -f https://savelife.com/api/ai/health || exit 1

      - name: Run integration tests
        working-directory: ./frontend
        run: |
          npm install -g pnpm
          pnpm install --frozen-lockfile
          
          # Set environment variables for tests
          export CYPRESS_BASE_URL=https://savelife.com
          export CYPRESS_API_URL=https://savelife.com/api
          
          # Run Cypress tests
          pnpm run test:e2e:headless

      - name: Update Azure Application Insights
        run: |
          # Create deployment annotation
          az monitor app-insights events show \
            --app savelife-prod-ai \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --start-time $(date -u -d '1 hour ago' +%Y-%m-%dT%H:%M:%S.%3NZ) \
            --end-time $(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Run Azure Load Testing
        uses: azure/load-testing@v1
        with:
          loadTestConfigFile: 'infrastructure/azure/loadtest.yaml'
          loadTestResource: 'savelife-loadtest'
          resourceGroup: ${{ env.AZURE_RESOURCE_GROUP }}

      - name: Upload load test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: load-test-results
          path: ${{ github.workspace }}/loadTest

  backup-and-monitoring:
    name: Backup and Monitoring Setup
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create database backup
        run: |
          # Create database backup
          az postgres db export \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --server-name savelife-prod-db \
            --name savelife \
            --blob-url "https://savelifeprod.blob.core.windows.net/backups/db-backup-$(date +%Y%m%d-%H%M%S).sql"

      - name: Update monitoring alerts
        run: |
          # Update metric alerts for new deployment
          az monitor metrics alert update \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name "High CPU Usage" \
            --description "Updated after deployment $(date)"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production, performance-test, backup-and-monitoring]
    if: always()
    steps:
      - name: Notify Microsoft Teams
        uses: aliencube/microsoft-teams-actions@v0.8.0
        with:
          webhook_uri: ${{ secrets.TEAMS_WEBHOOK_URL }}
          title: SaveLife.com Azure Deployment
          summary: Deployment completed for commit ${{ github.sha }}
          text: |
            **Deployment Status:** ${{ job.status }}
            **Environment:** Production
            **Commit:** ${{ github.sha }}
            **Frontend URL:** https://savelife.com
            **Backend URL:** https://savelife.com/api
            **Deployed by:** ${{ github.actor }}

      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create Azure DevOps work item
        if: failure()
        run: |
          # Create work item for failed deployment
          az boards work-item create \
            --title "Deployment Failure - ${{ github.sha }}" \
            --type "Bug" \
            --description "Deployment failed for commit ${{ github.sha }}. Please investigate." \
            --assigned-to "${{ github.actor }}" \
            --org https://dev.azure.com/savelife \
            --project SaveLife

      - name: Update deployment status
        run: |
          echo "Azure deployment completed!"
          echo "Status: ${{ job.status }}"
          echo "Frontend: https://savelife.com"
          echo "Backend: https://savelife.com/api"
          echo "Commit: ${{ github.sha }}"

