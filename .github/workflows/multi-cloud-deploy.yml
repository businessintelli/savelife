name: Multi-Cloud Deployment

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      deploy_aws:
        description: 'Deploy to AWS'
        required: true
        default: true
        type: boolean
      deploy_gcp:
        description: 'Deploy to GCP'
        required: true
        default: true
        type: boolean
      deploy_azure:
        description: 'Deploy to Azure'
        required: true
        default: true
        type: boolean
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options:
          - staging
          - prod

env:
  REGISTRY_AWS: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  REGISTRY_GCP: us-central1-docker.pkg.dev/savelife-platform/savelife-repo
  REGISTRY_AZURE: savelifeprod.azurecr.io

jobs:
  prepare:
    name: Prepare Multi-Cloud Deployment
    runs-on: ubuntu-latest
    outputs:
      deploy-aws: ${{ steps.config.outputs.deploy-aws }}
      deploy-gcp: ${{ steps.config.outputs.deploy-gcp }}
      deploy-azure: ${{ steps.config.outputs.deploy-azure }}
      environment: ${{ steps.config.outputs.environment }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure deployment
        id: config
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "deploy-aws=${{ github.event.inputs.deploy_aws }}" >> $GITHUB_OUTPUT
            echo "deploy-gcp=${{ github.event.inputs.deploy_gcp }}" >> $GITHUB_OUTPUT
            echo "deploy-azure=${{ github.event.inputs.deploy_azure }}" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "deploy-aws=true" >> $GITHUB_OUTPUT
            echo "deploy-gcp=true" >> $GITHUB_OUTPUT
            echo "deploy-azure=true" >> $GITHUB_OUTPUT
            echo "environment=prod" >> $GITHUB_OUTPUT
          fi

      - name: Generate version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="v$(date +%Y%m%d)-${GITHUB_SHA::8}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  test:
    name: Run Comprehensive Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, security, performance]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies
        run: |
          cd frontend && npm install -g pnpm && pnpm install --frozen-lockfile
          cd ../backend && pip install -r requirements.txt

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          cd frontend && pnpm run test:ci
          cd ../backend && python -m pytest tests/ --cov=src --cov-report=xml

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: |
          cd frontend && pnpm run test:integration
          cd ../backend && python -m pytest tests/integration/

      - name: Run security tests
        if: matrix.test-type == 'security'
        run: |
          # Frontend security scan
          cd frontend && pnpm audit --audit-level high
          # Backend security scan
          cd ../backend && safety check
          # SAST scan
          semgrep --config=auto .

      - name: Run performance tests
        if: matrix.test-type == 'performance'
        run: |
          cd frontend && pnpm run test:performance
          cd ../backend && python -m pytest tests/performance/

  build-multi-registry:
    name: Build and Push to All Registries
    runs-on: ubuntu-latest
    needs: [prepare, test]
    outputs:
      aws-frontend-image: ${{ steps.build.outputs.aws-frontend-image }}
      aws-backend-image: ${{ steps.build.outputs.aws-backend-image }}
      gcp-frontend-image: ${{ steps.build.outputs.gcp-frontend-image }}
      gcp-backend-image: ${{ steps.build.outputs.gcp-backend-image }}
      azure-frontend-image: ${{ steps.build.outputs.azure-frontend-image }}
      azure-backend-image: ${{ steps.build.outputs.azure-backend-image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        if: needs.prepare.outputs.deploy-aws == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        if: needs.prepare.outputs.deploy-aws == 'true'
        uses: aws-actions/amazon-ecr-login@v2

      - name: Authenticate to Google Cloud
        if: needs.prepare.outputs.deploy-gcp == 'true'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for GCP
        if: needs.prepare.outputs.deploy-gcp == 'true'
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Login to Azure Container Registry
        if: needs.prepare.outputs.deploy-azure == 'true'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_AZURE }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push images
        id: build
        run: |
          VERSION=${{ needs.prepare.outputs.version }}
          
          # Build frontend image
          docker buildx build \
            --platform linux/amd64 \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            -t frontend:$VERSION \
            ./frontend
          
          # Build backend image
          docker buildx build \
            --platform linux/amd64 \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            -t backend:$VERSION \
            ./backend
          
          # Tag and push to AWS ECR
          if [ "${{ needs.prepare.outputs.deploy-aws }}" = "true" ]; then
            docker tag frontend:$VERSION ${{ env.REGISTRY_AWS }}/savelife-prod-frontend:$VERSION
            docker tag frontend:$VERSION ${{ env.REGISTRY_AWS }}/savelife-prod-frontend:latest
            docker tag backend:$VERSION ${{ env.REGISTRY_AWS }}/savelife-prod-backend:$VERSION
            docker tag backend:$VERSION ${{ env.REGISTRY_AWS }}/savelife-prod-backend:latest
            
            docker push ${{ env.REGISTRY_AWS }}/savelife-prod-frontend:$VERSION
            docker push ${{ env.REGISTRY_AWS }}/savelife-prod-frontend:latest
            docker push ${{ env.REGISTRY_AWS }}/savelife-prod-backend:$VERSION
            docker push ${{ env.REGISTRY_AWS }}/savelife-prod-backend:latest
            
            echo "aws-frontend-image=${{ env.REGISTRY_AWS }}/savelife-prod-frontend:$VERSION" >> $GITHUB_OUTPUT
            echo "aws-backend-image=${{ env.REGISTRY_AWS }}/savelife-prod-backend:$VERSION" >> $GITHUB_OUTPUT
          fi
          
          # Tag and push to GCP Artifact Registry
          if [ "${{ needs.prepare.outputs.deploy-gcp }}" = "true" ]; then
            docker tag frontend:$VERSION ${{ env.REGISTRY_GCP }}/frontend:$VERSION
            docker tag frontend:$VERSION ${{ env.REGISTRY_GCP }}/frontend:latest
            docker tag backend:$VERSION ${{ env.REGISTRY_GCP }}/backend:$VERSION
            docker tag backend:$VERSION ${{ env.REGISTRY_GCP }}/backend:latest
            
            docker push ${{ env.REGISTRY_GCP }}/frontend:$VERSION
            docker push ${{ env.REGISTRY_GCP }}/frontend:latest
            docker push ${{ env.REGISTRY_GCP }}/backend:$VERSION
            docker push ${{ env.REGISTRY_GCP }}/backend:latest
            
            echo "gcp-frontend-image=${{ env.REGISTRY_GCP }}/frontend:$VERSION" >> $GITHUB_OUTPUT
            echo "gcp-backend-image=${{ env.REGISTRY_GCP }}/backend:$VERSION" >> $GITHUB_OUTPUT
          fi
          
          # Tag and push to Azure Container Registry
          if [ "${{ needs.prepare.outputs.deploy-azure }}" = "true" ]; then
            docker tag frontend:$VERSION ${{ env.REGISTRY_AZURE }}/frontend:$VERSION
            docker tag frontend:$VERSION ${{ env.REGISTRY_AZURE }}/frontend:latest
            docker tag backend:$VERSION ${{ env.REGISTRY_AZURE }}/backend:$VERSION
            docker tag backend:$VERSION ${{ env.REGISTRY_AZURE }}/backend:latest
            
            docker push ${{ env.REGISTRY_AZURE }}/frontend:$VERSION
            docker push ${{ env.REGISTRY_AZURE }}/frontend:latest
            docker push ${{ env.REGISTRY_AZURE }}/backend:$VERSION
            docker push ${{ env.REGISTRY_AZURE }}/backend:latest
            
            echo "azure-frontend-image=${{ env.REGISTRY_AZURE }}/frontend:$VERSION" >> $GITHUB_OUTPUT
            echo "azure-backend-image=${{ env.REGISTRY_AZURE }}/backend:$VERSION" >> $GITHUB_OUTPUT
          fi

  deploy-aws:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: [prepare, build-multi-registry]
    if: needs.prepare.outputs.deploy-aws == 'true'
    environment:
      name: ${{ needs.prepare.outputs.environment }}-aws
      url: https://aws.savelife.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to AWS ECS
        run: |
          # Update ECS services
          aws ecs update-service \
            --cluster savelife-${{ needs.prepare.outputs.environment }}-cluster \
            --service savelife-${{ needs.prepare.outputs.environment }}-frontend \
            --force-new-deployment
          
          aws ecs update-service \
            --cluster savelife-${{ needs.prepare.outputs.environment }}-cluster \
            --service savelife-${{ needs.prepare.outputs.environment }}-backend \
            --force-new-deployment

      - name: Wait for AWS deployment
        run: |
          aws ecs wait services-stable \
            --cluster savelife-${{ needs.prepare.outputs.environment }}-cluster \
            --services savelife-${{ needs.prepare.outputs.environment }}-frontend savelife-${{ needs.prepare.outputs.environment }}-backend

  deploy-gcp:
    name: Deploy to GCP
    runs-on: ubuntu-latest
    needs: [prepare, build-multi-registry]
    if: needs.prepare.outputs.deploy-gcp == 'true'
    environment:
      name: ${{ needs.prepare.outputs.environment }}-gcp
      url: https://gcp.savelife.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to GCP Cloud Run
        run: |
          # Deploy backend
          gcloud run deploy savelife-backend-${{ needs.prepare.outputs.environment }} \
            --image=${{ needs.build-multi-registry.outputs.gcp-backend-image }} \
            --platform=managed \
            --region=us-central1 \
            --allow-unauthenticated
          
          # Get backend URL
          BACKEND_URL=$(gcloud run services describe savelife-backend-${{ needs.prepare.outputs.environment }} \
            --platform=managed \
            --region=us-central1 \
            --format="value(status.url)")
          
          # Deploy frontend
          gcloud run deploy savelife-frontend-${{ needs.prepare.outputs.environment }} \
            --image=${{ needs.build-multi-registry.outputs.gcp-frontend-image }} \
            --platform=managed \
            --region=us-central1 \
            --allow-unauthenticated \
            --set-env-vars=REACT_APP_API_URL=$BACKEND_URL

  deploy-azure:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    needs: [prepare, build-multi-registry]
    if: needs.prepare.outputs.deploy-azure == 'true'
    environment:
      name: ${{ needs.prepare.outputs.environment }}-azure
      url: https://azure.savelife.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web Apps
        run: |
          # Deploy backend
          az webapp config container set \
            --name savelife-${{ needs.prepare.outputs.environment }}-backend \
            --resource-group savelife-${{ needs.prepare.outputs.environment }}-rg \
            --docker-custom-image-name ${{ needs.build-multi-registry.outputs.azure-backend-image }}
          
          # Deploy frontend
          az webapp config container set \
            --name savelife-${{ needs.prepare.outputs.environment }}-frontend \
            --resource-group savelife-${{ needs.prepare.outputs.environment }}-rg \
            --docker-custom-image-name ${{ needs.build-multi-registry.outputs.azure-frontend-image }}
          
          # Restart apps
          az webapp restart \
            --name savelife-${{ needs.prepare.outputs.environment }}-backend \
            --resource-group savelife-${{ needs.prepare.outputs.environment }}-rg
          
          az webapp restart \
            --name savelife-${{ needs.prepare.outputs.environment }}-frontend \
            --resource-group savelife-${{ needs.prepare.outputs.environment }}-rg

  health-check:
    name: Multi-Cloud Health Check
    runs-on: ubuntu-latest
    needs: [prepare, deploy-aws, deploy-gcp, deploy-azure]
    if: always()
    steps:
      - name: Health check AWS
        if: needs.prepare.outputs.deploy-aws == 'true' && needs.deploy-aws.result == 'success'
        run: |
          curl -f https://aws.savelife.com/api/ai/health || echo "AWS health check failed"

      - name: Health check GCP
        if: needs.prepare.outputs.deploy-gcp == 'true' && needs.deploy-gcp.result == 'success'
        run: |
          curl -f https://gcp.savelife.com/api/ai/health || echo "GCP health check failed"

      - name: Health check Azure
        if: needs.prepare.outputs.deploy-azure == 'true' && needs.deploy-azure.result == 'success'
        run: |
          curl -f https://azure.savelife.com/api/ai/health || echo "Azure health check failed"

  notify:
    name: Notify Multi-Cloud Deployment
    runs-on: ubuntu-latest
    needs: [prepare, deploy-aws, deploy-gcp, deploy-azure, health-check]
    if: always()
    steps:
      - name: Create deployment summary
        run: |
          echo "## Multi-Cloud Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.prepare.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ needs.prepare.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "- AWS: ${{ needs.deploy-aws.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- GCP: ${{ needs.deploy-gcp.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Azure: ${{ needs.deploy-azure.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY

      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "Multi-Cloud Deployment Complete",
              "attachments": [
                {
                  "color": "${{ job.status == 'success' && 'good' || 'danger' }}",
                  "fields": [
                    {
                      "title": "Version",
                      "value": "${{ needs.prepare.outputs.version }}",
                      "short": true
                    },
                    {
                      "title": "Environment",
                      "value": "${{ needs.prepare.outputs.environment }}",
                      "short": true
                    },
                    {
                      "title": "AWS",
                      "value": "${{ needs.deploy-aws.result || 'skipped' }}",
                      "short": true
                    },
                    {
                      "title": "GCP",
                      "value": "${{ needs.deploy-gcp.result || 'skipped' }}",
                      "short": true
                    },
                    {
                      "title": "Azure",
                      "value": "${{ needs.deploy-azure.result || 'skipped' }}",
                      "short": true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

