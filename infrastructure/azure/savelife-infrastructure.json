{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "description": "SaveLife.com AI-Powered Medical Crowdfunding Platform - Complete Azure Infrastructure"
  },
  "parameters": {
    "environment": {
      "type": "string",
      "defaultValue": "prod",
      "allowedValues": ["dev", "staging", "prod"],
      "metadata": {
        "description": "Environment name for resource tagging and configuration"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "domainName": {
      "type": "string",
      "defaultValue": "savelife.com",
      "metadata": {
        "description": "Domain name for the application"
      }
    },
    "databasePassword": {
      "type": "securestring",
      "minLength": 8,
      "metadata": {
        "description": "Password for the PostgreSQL database"
      }
    },
    "openAIApiKey": {
      "type": "securestring",
      "metadata": {
        "description": "OpenAI API key for AI services"
      }
    },
    "stripeSecretKey": {
      "type": "securestring",
      "metadata": {
        "description": "Stripe secret key for payment processing"
      }
    }
  },
  "variables": {
    "resourcePrefix": "[concat('savelife-', parameters('environment'))]",
    "vnetName": "[concat(variables('resourcePrefix'), '-vnet')]",
    "subnetName": "[concat(variables('resourcePrefix'), '-subnet')]",
    "nsgName": "[concat(variables('resourcePrefix'), '-nsg')]",
    "appServicePlanName": "[concat(variables('resourcePrefix'), '-asp')]",
    "frontendAppName": "[concat(variables('resourcePrefix'), '-frontend')]",
    "backendAppName": "[concat(variables('resourcePrefix'), '-backend')]",
    "databaseServerName": "[concat(variables('resourcePrefix'), '-db')]",
    "databaseName": "savelife",
    "storageAccountName": "[concat('savelife', parameters('environment'), uniqueString(resourceGroup().id))]",
    "keyVaultName": "[concat(variables('resourcePrefix'), '-kv')]",
    "appInsightsName": "[concat(variables('resourcePrefix'), '-ai')]",
    "logAnalyticsName": "[concat(variables('resourcePrefix'), '-la')]",
    "containerRegistryName": "[concat('savelife', parameters('environment'), uniqueString(resourceGroup().id))]",
    "applicationGatewayName": "[concat(variables('resourcePrefix'), '-agw')]",
    "publicIPName": "[concat(variables('resourcePrefix'), '-pip')]",
    "environmentConfig": {
      "dev": {
        "appServicePlanSku": "B1",
        "databaseSku": "B_Gen5_1",
        "databaseStorage": 20480,
        "frontendInstances": 1,
        "backendInstances": 1
      },
      "staging": {
        "appServicePlanSku": "S1",
        "databaseSku": "GP_Gen5_2",
        "databaseStorage": 51200,
        "frontendInstances": 2,
        "backendInstances": 2
      },
      "prod": {
        "appServicePlanSku": "P1v2",
        "databaseSku": "GP_Gen5_4",
        "databaseStorage": 102400,
        "frontendInstances": 3,
        "backendInstances": 3
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2021-02-01",
      "name": "[variables('vnetName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": ["10.0.0.0/16"]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "10.0.1.0/24",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
              },
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Storage"
                },
                {
                  "service": "Microsoft.Sql"
                },
                {
                  "service": "Microsoft.KeyVault"
                }
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2021-02-01",
      "name": "[variables('nsgName')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowHTTPS",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1000,
              "direction": "Inbound"
            }
          },
          {
            "name": "AllowHTTP",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1001,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-04-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "accessTier": "Hot",
        "supportsHttpsTrafficOnly": true,
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": true,
        "networkAcls": {
          "defaultAction": "Allow"
        }
      },
      "resources": [
        {
          "type": "blobServices/containers",
          "apiVersion": "2021-04-01",
          "name": "default/static-assets",
          "dependsOn": [
            "[variables('storageAccountName')]"
          ],
          "properties": {
            "publicAccess": "Blob"
          }
        },
        {
          "type": "blobServices/containers",
          "apiVersion": "2021-04-01",
          "name": "default/documents",
          "dependsOn": [
            "[variables('storageAccountName')]"
          ],
          "properties": {
            "publicAccess": "None"
          }
        },
        {
          "type": "blobServices/containers",
          "apiVersion": "2021-04-01",
          "name": "default/backups",
          "dependsOn": [
            "[variables('storageAccountName')]"
          ],
          "properties": {
            "publicAccess": "None"
          }
        }
      ]
    },
    {
      "type": "Microsoft.DBforPostgreSQL/servers",
      "apiVersion": "2017-12-01",
      "name": "[variables('databaseServerName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[variables('environmentConfig')[parameters('environment')].databaseSku]"
      },
      "properties": {
        "administratorLogin": "savelife",
        "administratorLoginPassword": "[parameters('databasePassword')]",
        "version": "11",
        "sslEnforcement": "Enabled",
        "minimalTlsVersion": "TLS1_2",
        "storageProfile": {
          "storageMB": "[variables('environmentConfig')[parameters('environment')].databaseStorage]",
          "backupRetentionDays": 7,
          "geoRedundantBackup": "Disabled",
          "storageAutogrow": "Enabled"
        }
      },
      "resources": [
        {
          "type": "databases",
          "apiVersion": "2017-12-01",
          "name": "[variables('databaseName')]",
          "dependsOn": [
            "[resourceId('Microsoft.DBforPostgreSQL/servers', variables('databaseServerName'))]"
          ],
          "properties": {
            "charset": "UTF8",
            "collation": "English_United States.1252"
          }
        },
        {
          "type": "firewallRules",
          "apiVersion": "2017-12-01",
          "name": "AllowAzureServices",
          "dependsOn": [
            "[resourceId('Microsoft.DBforPostgreSQL/servers', variables('databaseServerName'))]"
          ],
          "properties": {
            "startIpAddress": "0.0.0.0",
            "endIpAddress": "0.0.0.0"
          }
        }
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2021-04-01-preview",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [],
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": true,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 90,
        "enableRbacAuthorization": true,
        "networkAcls": {
          "defaultAction": "Allow",
          "bypass": "AzureServices"
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-04-01-preview",
      "name": "[concat(variables('keyVaultName'), '/database-password')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[parameters('databasePassword')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-04-01-preview",
      "name": "[concat(variables('keyVaultName'), '/openai-api-key')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[parameters('openAIApiKey')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2021-04-01-preview",
      "name": "[concat(variables('keyVaultName'), '/stripe-secret-key')]",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[parameters('stripeSecretKey')]"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2021-06-01",
      "name": "[variables('logAnalyticsName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 30
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('appInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName'))]"
      ]
    },
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2021-06-01-preview",
      "name": "[variables('containerRegistryName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Basic"
      },
      "properties": {
        "adminUserEnabled": true
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-02-01",
      "name": "[variables('appServicePlanName')]",
      "location": "[parameters('location')]",
      "kind": "linux",
      "properties": {
        "reserved": true
      },
      "sku": {
        "name": "[variables('environmentConfig')[parameters('environment')].appServicePlanSku]"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-02-01",
      "name": "[variables('frontendAppName')]",
      "location": "[parameters('location')]",
      "kind": "app,linux,container",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName'))]",
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "siteConfig": {
          "linuxFxVersion": "[concat('DOCKER|', variables('containerRegistryName'), '.azurecr.io/frontend:latest')]",
          "appSettings": [
            {
              "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
              "value": "false"
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_URL",
              "value": "[concat('https://', variables('containerRegistryName'), '.azurecr.io')]"
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_USERNAME",
              "value": "[variables('containerRegistryName')]"
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
              "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName')), '2021-06-01-preview').passwords[0].value]"
            },
            {
              "name": "REACT_APP_API_URL",
              "value": "[concat('https://', variables('backendAppName'), '.azurewebsites.net')]"
            },
            {
              "name": "REACT_APP_ENVIRONMENT",
              "value": "[parameters('environment')]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).InstrumentationKey]"
            }
          ],
          "alwaysOn": true,
          "httpLoggingEnabled": true,
          "logsDirectorySizeLimit": 35
        },
        "httpsOnly": true
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-02-01",
      "name": "[variables('backendAppName')]",
      "location": "[parameters('location')]",
      "kind": "app,linux,container",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName'))]",
        "[resourceId('Microsoft.DBforPostgreSQL/servers', variables('databaseServerName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]"
      ],
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "siteConfig": {
          "linuxFxVersion": "[concat('DOCKER|', variables('containerRegistryName'), '.azurecr.io/backend:latest')]",
          "appSettings": [
            {
              "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
              "value": "false"
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_URL",
              "value": "[concat('https://', variables('containerRegistryName'), '.azurecr.io')]"
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_USERNAME",
              "value": "[variables('containerRegistryName')]"
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
              "value": "[listCredentials(resourceId('Microsoft.ContainerRegistry/registries', variables('containerRegistryName')), '2021-06-01-preview').passwords[0].value]"
            },
            {
              "name": "DATABASE_URL",
              "value": "[concat('postgresql://savelife:', parameters('databasePassword'), '@', variables('databaseServerName'), '.postgres.database.azure.com:5432/', variables('databaseName'), '?sslmode=require')]"
            },
            {
              "name": "ENVIRONMENT",
              "value": "[parameters('environment')]"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_NAME",
              "value": "[variables('storageAccountName')]"
            },
            {
              "name": "AZURE_STORAGE_ACCOUNT_KEY",
              "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2021-04-01').keys[0].value]"
            },
            {
              "name": "AZURE_KEY_VAULT_URL",
              "value": "[concat('https://', variables('keyVaultName'), '.vault.azure.net/')]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).InstrumentationKey]"
            }
          ],
          "alwaysOn": true,
          "httpLoggingEnabled": true,
          "logsDirectorySizeLimit": 35
        },
        "httpsOnly": true
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2021-02-01",
      "name": "[variables('publicIPName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(variables('resourcePrefix'), '-', uniqueString(resourceGroup().id))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/applicationGateways",
      "apiVersion": "2021-02-01",
      "name": "[variables('applicationGatewayName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPName'))]",
        "[resourceId('Microsoft.Web/sites', variables('frontendAppName'))]",
        "[resourceId('Microsoft.Web/sites', variables('backendAppName'))]"
      ],
      "properties": {
        "sku": {
          "name": "Standard_v2",
          "tier": "Standard_v2",
          "capacity": 2
        },
        "gatewayIPConfigurations": [
          {
            "name": "appGatewayIpConfig",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnetName'))]"
              }
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "appGatewayFrontendIP",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPName'))]"
              }
            }
          }
        ],
        "frontendPorts": [
          {
            "name": "appGatewayFrontendPort80",
            "properties": {
              "port": 80
            }
          },
          {
            "name": "appGatewayFrontendPort443",
            "properties": {
              "port": 443
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "frontendBackendPool",
            "properties": {
              "backendAddresses": [
                {
                  "fqdn": "[concat(variables('frontendAppName'), '.azurewebsites.net')]"
                }
              ]
            }
          },
          {
            "name": "backendBackendPool",
            "properties": {
              "backendAddresses": [
                {
                  "fqdn": "[concat(variables('backendAppName'), '.azurewebsites.net')]"
                }
              ]
            }
          }
        ],
        "backendHttpSettingsCollection": [
          {
            "name": "appGatewayBackendHttpSettings",
            "properties": {
              "port": 443,
              "protocol": "Https",
              "cookieBasedAffinity": "Disabled",
              "pickHostNameFromBackendAddress": true,
              "requestTimeout": 30
            }
          }
        ],
        "httpListeners": [
          {
            "name": "appGatewayHttpListener",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', variables('applicationGatewayName'), 'appGatewayFrontendIP')]"
              },
              "frontendPort": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('applicationGatewayName'), 'appGatewayFrontendPort80')]"
              },
              "protocol": "Http"
            }
          }
        ],
        "requestRoutingRules": [
          {
            "name": "frontendRule",
            "properties": {
              "ruleType": "Basic",
              "httpListener": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('applicationGatewayName'), 'appGatewayHttpListener')]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('applicationGatewayName'), 'frontendBackendPool')]"
              },
              "backendHttpSettings": {
                "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('applicationGatewayName'), 'appGatewayBackendHttpSettings')]"
              }
            }
          }
        ]
      }
    }
  ],
  "outputs": {
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "frontendAppName": {
      "type": "string",
      "value": "[variables('frontendAppName')]"
    },
    "backendAppName": {
      "type": "string",
      "value": "[variables('backendAppName')]"
    },
    "frontendUrl": {
      "type": "string",
      "value": "[concat('https://', variables('frontendAppName'), '.azurewebsites.net')]"
    },
    "backendUrl": {
      "type": "string",
      "value": "[concat('https://', variables('backendAppName'), '.azurewebsites.net')]"
    },
    "databaseServerName": {
      "type": "string",
      "value": "[variables('databaseServerName')]"
    },
    "storageAccountName": {
      "type": "string",
      "value": "[variables('storageAccountName')]"
    },
    "containerRegistryName": {
      "type": "string",
      "value": "[variables('containerRegistryName')]"
    },
    "applicationGatewayPublicIP": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPName'))).ipAddress]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[variables('keyVaultName')]"
    }
  }
}

